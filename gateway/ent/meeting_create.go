// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isutare412/goarch/gateway/ent/meeting"
	"github.com/isutare412/goarch/gateway/ent/user"
)

// MeetingCreate is the builder for creating a Meeting entity.
type MeetingCreate struct {
	config
	mutation *MeetingMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mc *MeetingCreate) SetCreateTime(t time.Time) *MeetingCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableCreateTime(t *time.Time) *MeetingCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MeetingCreate) SetUpdateTime(t time.Time) *MeetingCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableUpdateTime(t *time.Time) *MeetingCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetTitle sets the "title" field.
func (mc *MeetingCreate) SetTitle(s string) *MeetingCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetStartsAt sets the "starts_at" field.
func (mc *MeetingCreate) SetStartsAt(t time.Time) *MeetingCreate {
	mc.mutation.SetStartsAt(t)
	return mc
}

// SetEndsAt sets the "ends_at" field.
func (mc *MeetingCreate) SetEndsAt(t time.Time) *MeetingCreate {
	mc.mutation.SetEndsAt(t)
	return mc
}

// SetDescription sets the "description" field.
func (mc *MeetingCreate) SetDescription(s string) *MeetingCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableDescription(s *string) *MeetingCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetOrganizerID sets the "organizer" edge to the User entity by ID.
func (mc *MeetingCreate) SetOrganizerID(id int) *MeetingCreate {
	mc.mutation.SetOrganizerID(id)
	return mc
}

// SetOrganizer sets the "organizer" edge to the User entity.
func (mc *MeetingCreate) SetOrganizer(u *User) *MeetingCreate {
	return mc.SetOrganizerID(u.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (mc *MeetingCreate) AddParticipantIDs(ids ...int) *MeetingCreate {
	mc.mutation.AddParticipantIDs(ids...)
	return mc
}

// AddParticipants adds the "participants" edges to the User entity.
func (mc *MeetingCreate) AddParticipants(u ...*User) *MeetingCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddParticipantIDs(ids...)
}

// Mutation returns the MeetingMutation object of the builder.
func (mc *MeetingCreate) Mutation() *MeetingMutation {
	return mc.mutation
}

// Save creates the Meeting in the database.
func (mc *MeetingCreate) Save(ctx context.Context) (*Meeting, error) {
	var (
		err  error
		node *Meeting
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeetingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Meeting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MeetingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeetingCreate) SaveX(ctx context.Context) *Meeting {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MeetingCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MeetingCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MeetingCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := meeting.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := meeting.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MeetingCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Meeting.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Meeting.update_time"`)}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Meeting.title"`)}
	}
	if v, ok := mc.mutation.Title(); ok {
		if err := meeting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Meeting.title": %w`, err)}
		}
	}
	if _, ok := mc.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "Meeting.starts_at"`)}
	}
	if _, ok := mc.mutation.EndsAt(); !ok {
		return &ValidationError{Name: "ends_at", err: errors.New(`ent: missing required field "Meeting.ends_at"`)}
	}
	if _, ok := mc.mutation.OrganizerID(); !ok {
		return &ValidationError{Name: "organizer", err: errors.New(`ent: missing required edge "Meeting.organizer"`)}
	}
	return nil
}

func (mc *MeetingCreate) sqlSave(ctx context.Context) (*Meeting, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MeetingCreate) createSpec() (*Meeting, *sqlgraph.CreateSpec) {
	var (
		_node = &Meeting{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: meeting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: meeting.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: meeting.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := mc.mutation.StartsAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldStartsAt,
		})
		_node.StartsAt = value
	}
	if value, ok := mc.mutation.EndsAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldEndsAt,
		})
		_node.EndsAt = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: meeting.FieldDescription,
		})
		_node.Description = &value
	}
	if nodes := mc.mutation.OrganizerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meeting.OrganizerTable,
			Columns: []string{meeting.OrganizerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_organizes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MeetingCreateBulk is the builder for creating many Meeting entities in bulk.
type MeetingCreateBulk struct {
	config
	builders []*MeetingCreate
}

// Save creates the Meeting entities in the database.
func (mcb *MeetingCreateBulk) Save(ctx context.Context) ([]*Meeting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Meeting, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeetingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MeetingCreateBulk) SaveX(ctx context.Context) []*Meeting {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MeetingCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MeetingCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
