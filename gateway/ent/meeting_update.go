// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/isutare412/goarch/gateway/ent/meeting"
	"github.com/isutare412/goarch/gateway/ent/predicate"
	"github.com/isutare412/goarch/gateway/ent/user"
)

// MeetingUpdate is the builder for updating Meeting entities.
type MeetingUpdate struct {
	config
	hooks    []Hook
	mutation *MeetingMutation
}

// Where appends a list predicates to the MeetingUpdate builder.
func (mu *MeetingUpdate) Where(ps ...predicate.Meeting) *MeetingUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MeetingUpdate) SetUpdateTime(t time.Time) *MeetingUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MeetingUpdate) SetTitle(s string) *MeetingUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetStartsAt sets the "starts_at" field.
func (mu *MeetingUpdate) SetStartsAt(t time.Time) *MeetingUpdate {
	mu.mutation.SetStartsAt(t)
	return mu
}

// SetEndsAt sets the "ends_at" field.
func (mu *MeetingUpdate) SetEndsAt(t time.Time) *MeetingUpdate {
	mu.mutation.SetEndsAt(t)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MeetingUpdate) SetDescription(s string) *MeetingUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MeetingUpdate) SetNillableDescription(s *string) *MeetingUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MeetingUpdate) ClearDescription() *MeetingUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetOrganizerID sets the "organizer" edge to the User entity by ID.
func (mu *MeetingUpdate) SetOrganizerID(id int) *MeetingUpdate {
	mu.mutation.SetOrganizerID(id)
	return mu
}

// SetNillableOrganizerID sets the "organizer" edge to the User entity by ID if the given value is not nil.
func (mu *MeetingUpdate) SetNillableOrganizerID(id *int) *MeetingUpdate {
	if id != nil {
		mu = mu.SetOrganizerID(*id)
	}
	return mu
}

// SetOrganizer sets the "organizer" edge to the User entity.
func (mu *MeetingUpdate) SetOrganizer(u *User) *MeetingUpdate {
	return mu.SetOrganizerID(u.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (mu *MeetingUpdate) AddParticipantIDs(ids ...int) *MeetingUpdate {
	mu.mutation.AddParticipantIDs(ids...)
	return mu
}

// AddParticipants adds the "participants" edges to the User entity.
func (mu *MeetingUpdate) AddParticipants(u ...*User) *MeetingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddParticipantIDs(ids...)
}

// Mutation returns the MeetingMutation object of the builder.
func (mu *MeetingUpdate) Mutation() *MeetingMutation {
	return mu.mutation
}

// ClearOrganizer clears the "organizer" edge to the User entity.
func (mu *MeetingUpdate) ClearOrganizer() *MeetingUpdate {
	mu.mutation.ClearOrganizer()
	return mu
}

// ClearParticipants clears all "participants" edges to the User entity.
func (mu *MeetingUpdate) ClearParticipants() *MeetingUpdate {
	mu.mutation.ClearParticipants()
	return mu
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (mu *MeetingUpdate) RemoveParticipantIDs(ids ...int) *MeetingUpdate {
	mu.mutation.RemoveParticipantIDs(ids...)
	return mu
}

// RemoveParticipants removes "participants" edges to User entities.
func (mu *MeetingUpdate) RemoveParticipants(u ...*User) *MeetingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MeetingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeetingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MeetingUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MeetingUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MeetingUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MeetingUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := meeting.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MeetingUpdate) check() error {
	if v, ok := mu.mutation.Title(); ok {
		if err := meeting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Meeting.title": %w`, err)}
		}
	}
	return nil
}

func (mu *MeetingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   meeting.Table,
			Columns: meeting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: meeting.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldUpdateTime,
		})
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: meeting.FieldTitle,
		})
	}
	if value, ok := mu.mutation.StartsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldStartsAt,
		})
	}
	if value, ok := mu.mutation.EndsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldEndsAt,
		})
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: meeting.FieldDescription,
		})
	}
	if mu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: meeting.FieldDescription,
		})
	}
	if mu.mutation.OrganizerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meeting.OrganizerTable,
			Columns: []string{meeting.OrganizerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OrganizerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meeting.OrganizerTable,
			Columns: []string{meeting.OrganizerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !mu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meeting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MeetingUpdateOne is the builder for updating a single Meeting entity.
type MeetingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MeetingMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MeetingUpdateOne) SetUpdateTime(t time.Time) *MeetingUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetTitle sets the "title" field.
func (muo *MeetingUpdateOne) SetTitle(s string) *MeetingUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetStartsAt sets the "starts_at" field.
func (muo *MeetingUpdateOne) SetStartsAt(t time.Time) *MeetingUpdateOne {
	muo.mutation.SetStartsAt(t)
	return muo
}

// SetEndsAt sets the "ends_at" field.
func (muo *MeetingUpdateOne) SetEndsAt(t time.Time) *MeetingUpdateOne {
	muo.mutation.SetEndsAt(t)
	return muo
}

// SetDescription sets the "description" field.
func (muo *MeetingUpdateOne) SetDescription(s string) *MeetingUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MeetingUpdateOne) SetNillableDescription(s *string) *MeetingUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MeetingUpdateOne) ClearDescription() *MeetingUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetOrganizerID sets the "organizer" edge to the User entity by ID.
func (muo *MeetingUpdateOne) SetOrganizerID(id int) *MeetingUpdateOne {
	muo.mutation.SetOrganizerID(id)
	return muo
}

// SetNillableOrganizerID sets the "organizer" edge to the User entity by ID if the given value is not nil.
func (muo *MeetingUpdateOne) SetNillableOrganizerID(id *int) *MeetingUpdateOne {
	if id != nil {
		muo = muo.SetOrganizerID(*id)
	}
	return muo
}

// SetOrganizer sets the "organizer" edge to the User entity.
func (muo *MeetingUpdateOne) SetOrganizer(u *User) *MeetingUpdateOne {
	return muo.SetOrganizerID(u.ID)
}

// AddParticipantIDs adds the "participants" edge to the User entity by IDs.
func (muo *MeetingUpdateOne) AddParticipantIDs(ids ...int) *MeetingUpdateOne {
	muo.mutation.AddParticipantIDs(ids...)
	return muo
}

// AddParticipants adds the "participants" edges to the User entity.
func (muo *MeetingUpdateOne) AddParticipants(u ...*User) *MeetingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddParticipantIDs(ids...)
}

// Mutation returns the MeetingMutation object of the builder.
func (muo *MeetingUpdateOne) Mutation() *MeetingMutation {
	return muo.mutation
}

// ClearOrganizer clears the "organizer" edge to the User entity.
func (muo *MeetingUpdateOne) ClearOrganizer() *MeetingUpdateOne {
	muo.mutation.ClearOrganizer()
	return muo
}

// ClearParticipants clears all "participants" edges to the User entity.
func (muo *MeetingUpdateOne) ClearParticipants() *MeetingUpdateOne {
	muo.mutation.ClearParticipants()
	return muo
}

// RemoveParticipantIDs removes the "participants" edge to User entities by IDs.
func (muo *MeetingUpdateOne) RemoveParticipantIDs(ids ...int) *MeetingUpdateOne {
	muo.mutation.RemoveParticipantIDs(ids...)
	return muo
}

// RemoveParticipants removes "participants" edges to User entities.
func (muo *MeetingUpdateOne) RemoveParticipants(u ...*User) *MeetingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveParticipantIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MeetingUpdateOne) Select(field string, fields ...string) *MeetingUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Meeting entity.
func (muo *MeetingUpdateOne) Save(ctx context.Context) (*Meeting, error) {
	var (
		err  error
		node *Meeting
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MeetingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Meeting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MeetingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MeetingUpdateOne) SaveX(ctx context.Context) *Meeting {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MeetingUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MeetingUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MeetingUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := meeting.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MeetingUpdateOne) check() error {
	if v, ok := muo.mutation.Title(); ok {
		if err := meeting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Meeting.title": %w`, err)}
		}
	}
	return nil
}

func (muo *MeetingUpdateOne) sqlSave(ctx context.Context) (_node *Meeting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   meeting.Table,
			Columns: meeting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: meeting.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Meeting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meeting.FieldID)
		for _, f := range fields {
			if !meeting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meeting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldUpdateTime,
		})
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: meeting.FieldTitle,
		})
	}
	if value, ok := muo.mutation.StartsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldStartsAt,
		})
	}
	if value, ok := muo.mutation.EndsAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: meeting.FieldEndsAt,
		})
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: meeting.FieldDescription,
		})
	}
	if muo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: meeting.FieldDescription,
		})
	}
	if muo.mutation.OrganizerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meeting.OrganizerTable,
			Columns: []string{meeting.OrganizerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OrganizerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meeting.OrganizerTable,
			Columns: []string{meeting.OrganizerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !muo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meeting.ParticipantsTable,
			Columns: meeting.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Meeting{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meeting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
